{"mappings":"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","sources":["postBuild.js"],"sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\nconst replace = require('replace-in-file');\r\nconst escapeRegExp = require('lodash.escaperegexp');\r\n\r\n// the directory in which you're outputting your build\r\nlet baseDir = 'public'\r\n// the name for the directory where your static files will be moved to\r\nlet staticDir = 'static'\r\n// the directory where your built files (css and JavaScript) will be moved  to\r\nlet assetsDir = 'build'\r\n\r\n// if the staticDir directory isn't there, create it\r\nif (!fs.existsSync(path.join(__dirname, baseDir, staticDir))){\r\n  fs.mkdirSync(path.join(__dirname, baseDir, staticDir));\r\n}\r\n\r\n// same for the assetsDir directory\r\nif (!fs.existsSync(path.join(__dirname, baseDir, assetsDir))){\r\n  fs.mkdirSync(path.join(__dirname, baseDir, assetsDir));\r\n}\r\n\r\n// Loop through the baseDir directory\r\nfs.readdir(`./${baseDir}`, (err, files) => {\r\n  // store all files in custom arrays by type\r\n  let html = []\r\n  let js = []\r\n  let css = []\r\n  let maps = []\r\n  let staticAssets = []\r\n\r\n  files.forEach(file => {\r\n    // first HTML files\r\n    if(file.match(/.+\\.(html)$/)) {\r\n      console.log('html match', file)\r\n      html.push(file)\r\n    } else  if(file.match(/.+\\.(js)$/)) { // then JavaScripts\r\n      js.push(file)\r\n    } else if(file.match(/.+\\.(map)$/)) { // then CSS\r\n      maps.push(file)\r\n    } else if(file.match(/.+\\.(css)$/)) { // then sourcemaps\r\n      css.push(file)\r\n    } else if(file.match(/.+\\..+$/)){ // all other files, exclude current directory and directory one level up\r\n      staticAssets.push(file)\r\n    }\r\n  });\r\n  // check what went where\r\n  console.log('html', html, 'css', css, 'js', js, 'staticAssets', staticAssets)\r\n\r\n  // create an array for all compiled assets\r\n  let assets = css.concat(js).concat(maps)\r\n\r\n  // replace all other resources in html\r\n  html.forEach(\r\n    file => {\r\n      staticAssets.forEach(name => {\r\n        let options = {\r\n          files: path.join('public', file),\r\n          from: new RegExp(escapeRegExp(name), 'g'),\r\n          to: staticDir + '/' + name\r\n        }\r\n        try {\r\n          let changedFiles = replace.sync(options);\r\n          console.log('Modified files:', changedFiles.join(', '));\r\n        }\r\n        catch (error) {\r\n          console.error('Error occurred:', error);\r\n        }\r\n      })\r\n      assets.forEach(name => {\r\n        let options = {\r\n          files: path.join('public', file),\r\n          from: new RegExp(escapeRegExp(name), 'g'),\r\n          to: assetsDir + '/' + name\r\n        }\r\n        try {\r\n          let changedFiles = replace.sync(options);\r\n          console.log('Modified files:', changedFiles.join(', '));\r\n        }\r\n        catch (error) {\r\n          console.error('Error occurred:', error);\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  // replace map links in js\r\n  js.forEach(\r\n    file => {\r\n      maps.forEach(name => {\r\n        let options = {\r\n          files: path.join('public', file),\r\n          from: name,\r\n          to: '../' + assetsDir + '/' + name\r\n        }\r\n        try {\r\n          let changedFiles = replace.sync(options);\r\n          console.log('Modified files:', changedFiles.join(', '));\r\n        }\r\n        catch (error) {\r\n          console.error('Error occurred:', error);\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  // replace links in css\r\n  css.forEach(\r\n    file => {\r\n      staticAssets.forEach(name => {\r\n        let options = {\r\n          files: path.join('public', file),\r\n          from: new RegExp(escapeRegExp(name), 'g'),\r\n          to: '../' + staticDir + '/' + name\r\n        }\r\n        try {\r\n          let changedFiles = replace.sync(options);\r\n          console.log('Modified files:', changedFiles.join(', '));\r\n        }\r\n        catch (error) {\r\n          console.error('Error occurred:', error);\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  // move js and css and maps\r\n  assets.forEach(\r\n    name => {\r\n      fs.rename(path.join(__dirname, 'public', name), path.join(__dirname, 'public', assetsDir,  name), function (err) {\r\n        if (err) throw err\r\n        console.log(`Successfully moved ${name}`)\r\n      })\r\n    }\r\n  )\r\n  // move staticAssets\r\n  staticAssets.forEach(\r\n    name => {\r\n      fs.rename(path.join(__dirname, 'public', name), path.join(__dirname, 'public', staticDir,  name), function (err) {\r\n        if (err) throw err\r\n        console.log(`Successfully moved ${name}`)\r\n      })\r\n    }\r\n  )\r\n\r\n\r\n}); "],"names":[],"version":3,"file":"index.js.map"}